"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var swingDragOptions_1 = require("./swingDragOptions");
var SwingDragPlugIn = (function () {
    function SwingDragPlugIn(swingDragOptions) {
        this.plugInName = 'ui.swingdrag';
        this.swingDragOptions = swingDragOptions;
        if (!this.swingDragOptions) {
            this.swingDragOptions = new swingDragOptions_1.SwingDragOptions();
        }
    }
    SwingDragPlugIn.prototype.destroy = function () {
        if (!$ || !$.Widget) {
            return;
        }
        $.Widget.prototype.destroy.call(this);
        if (!this.element) {
            return;
        }
        var elementRef = $(this.element);
        elementRef.draggable('destroy');
        elementRef.removeClass('swingdrag');
        elementRef.removeClass('swingdrag-shadow');
        $(this.element).css({
            "transform": "",
        });
    };
    SwingDragPlugIn.prototype.register = function () {
        $.widget(this.plugInName, this);
    };
    SwingDragPlugIn.prototype._create = function () {
        var _this = this;
        var elementRef = $(this.element);
        elementRef.addClass('swingdrag');
        var direction = 0;
        var oldDirection = 0;
        var oldX;
        var dragging = false;
        if (!this.options.maxRotationAngleDeg || this.options.maxRotationAngleDeg <= 0) {
            this.options.maxRotationAngleDeg = this.swingDragOptions.maxRotationAngleDeg;
        }
        if (this.options.showShadow === undefined) {
            this.options.showShadow = this.swingDragOptions.showShadow;
        }
        if (!this.options.pickUpScaleFactor) {
            this.options.pickUpScaleFactor = this.swingDragOptions.pickUpScaleFactor;
        }
        elementRef.draggable({
            start: function (e) {
                dragging = true;
                if (_this.swingDragOptions.showShadow) {
                    elementRef.addClass('swingdrag-shadow');
                }
            },
            drag: function (e) {
                direction = _this.getDirection(e.clientX, oldX);
                oldX = e.clientX;
                if (oldDirection != direction) {
                    elementRef.css({
                        "transform": 'rotate(' + (_this.swingDragOptions.maxRotationAngleDeg * direction) + 'deg) scale(' + _this.swingDragOptions.pickUpScaleFactor + ')'
                    });
                    oldDirection = direction;
                }
            },
            stop: function (e) {
                elementRef.removeClass('swingdrag-shadow');
                elementRef.css({
                    "transform": "rotate(0deg) scale(1)"
                });
                oldDirection = 0;
                dragging = false;
            }
        });
    };
    SwingDragPlugIn.prototype.getDirection = function (actualX, oldX) {
        var diffX = actualX - oldX;
        if (actualX < oldX) {
            return -1;
        }
        else if (actualX > oldX) {
            return 1;
        }
        else {
            return 0;
        }
    };
    SwingDragPlugIn.prototype._setOption = function (option, value) {
        $.Widget.prototype._setOption.apply(this, arguments);
        switch (option) {
            case "maxRotationAngleDeg":
                this.swingDragOptions.maxRotationAngleDeg = value;
                break;
            case "showShadow":
                this.swingDragOptions.showShadow = value;
                break;
            case "pickUpScaleFactor":
                this.swingDragOptions.pickUpScaleFactor = value;
                break;
        }
    };
    return SwingDragPlugIn;
}());
exports.SwingDragPlugIn = SwingDragPlugIn;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
